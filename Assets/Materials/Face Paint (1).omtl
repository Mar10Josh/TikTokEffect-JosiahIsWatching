{
    "Pass": [
        {
            "Ausl": "a1",
            "BlendMode": "Transparent",
            "ClearType": "Dont",
            "ColorWrite": "RGBA",
            "Cull": "Back",
            "DepthTestEnable": "On",
            "DepthWriteEnable": "On",
            "FullScreenShading": "Off",
            "PassType": "Normal",
            "UseCameraRT": "Off",
            "UseFBOFetch": "Off",
            "UseFBOTexture": "Off",
            "ZTest": "LessEqual"
        }
    ],
    "Shader": "Face Paint (1)"
}
---ENDJSON

---BEGIN UIPROPERTY

    $Base Property$
    _BaseTexture (Texture, 2D) = "Default_Material_Texture_Background"
    _BaseColor (Tint Color, Color) = [1.000000, 0.000000, 0.046384, 1.000000]

    $UV Control$
    UvControl (UV Control, Defs) = 0
    [UvControl] _Tiling (Tilling, Vec2) = [1.000000, 1.000000]
    [UvControl] _Offset (Offset, Vec2) = [0.000000, 0.000000]
    [UvControl] _Rotation (Rotation, Range(0.000000, 360.000000)) = 0.000000

---END UIPROPERTY

---BEGIN a1

    #version 300 es
    #pragma only_renderers glsl30 metal

    // Attributes: attributes in vertex shader
    #pragma input attributes
        in vec3 attPosition;
        in vec2 attTexcoord0;
        in vec3 attNormal;
    #pragma end

    // Varyings: outputs of vertex shader, inputs for fragment shader
    #pragma varying varyings
        highp vec2 g_vary_uv0;
        highp vec4 v_sampling_pos;
        highp vec4 v_background_pos;
        highp vec3 v_worldPos;
        highp vec3 v_Normal;
    #pragma end

    // Output: output targets in fragment shader
    #pragma output targets
        out highp vec4 o_fragColor;
    #pragma end

    // Vertex stage section in vertex shader
    #pragma vs attributes varyings
        precision highp float;
        uniform mat4 u_Model;
        uniform mat4 u_MVP;
        uniform mat4 u_TransposeInvModel;
    #pragma end

    // Fragment stage section in fragment shader
    #pragma fs varyings targets
        precision highp float;
        uniform vec4 u_WorldSpaceCameraPos;
        uniform vec4 _BaseColor;
        uniform sampler2D _BaseTexture;
    #pragma end

    // Entry function in vertex shader, must match "void vertex()"
    void vertex()
    {
        vec3 modelPostiton = attPosition;
        vec4 homogeneous_modelPostiton = vec4(modelPostiton, 1.0);

        vec4 homogeneous_pos = vec4(attPosition, 1.0); // + vec4(0.0, 0.0, 10.0, 0.0); 
        // homogeneous_pos.xyz *= vec3(u_Scale);
        // float cosAngle = cos(u_RotateZ);
        // float sinAngle = sin(u_RotateZ);
        // mat3 rotation = mat3(cosAngle, 0.0, -sinAngle, 0.0, 1.0, 0.0, sinAngle, 0.0, cosAngle);
        // homogeneous_pos.xyz *= rotation;

        g_vary_uv0 = attTexcoord0;

        gl_Position = u_MVP * homogeneous_pos;

        v_worldPos = homogeneous_pos.xyz;
        v_Normal = mat3(u_TransposeInvModel) * attNormal; // * rotation;

        v_sampling_pos = u_MVP * homogeneous_modelPostiton;
        v_background_pos = u_MVP * homogeneous_pos;
    }

    // Entry function in fragment shader, must match "void fragment()"
    void fragment()
    {
        vec2 uv = g_vary_uv0;
        uv.y = 1.0 - uv.y;
        vec2 sampling_uv = (v_sampling_pos.xy / v_sampling_pos.w) * 0.5 + 0.5;
        // vec4 inputColor = texture(u_FBOTexture, sampling_uv);
        vec4 texColor = texture(_BaseTexture, uv) * _BaseColor;

        // vec2 background_uv = (v_background_pos.xy / v_background_pos.w) * vec2(0.5, -0.5) + 0.5;
        // vec3 normal = normalize(v_Normal);
        o_fragColor = texColor;
    }

---END a1
